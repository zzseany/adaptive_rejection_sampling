sum(case when product = 'A' then amount else 0 end) as productA,
sum(case when product = 'B' then amount else 0 end) as productB,
sum(case when product = 'C' then amount else 0 end) as productC,
from t group by c
")
t
sqldf("
select c as customer,
sum(case when product = 'A' then amount else 0 end) as productA,
sum(case when product = 'B' then amount else 0 end) as productB,
sum(case when product = 'C' then amount else 0 end) as productC
from t group by c
")
t%>% spread(product,amount) %>% gather(key = "product",value = "amount",2:4)
t%>% spread(product,amount) %>% arrange(desc(B))
t %>% spread(product, amount)
t %>% spread(product, amount) %>% arrange(desc(B))
t %>% spread(product, amount) %>% arrange(desc(A))
sales = data.frame(prod_id = c(1,2,1,2,1,3),
quantity = c(100,200,300,100,200,100))
product = data.frame(prod_id = c(1,2,3),
name = c("A",'B','C'))
sales
product
sqldf("
select p.name as name, sum(s.quantity) as quantity
from sales s join product p
on s.prod_id = p.prod_id
group by p.name
")
sales
sales %>% inner_join(product, by = prod_id) %>%
group_by(name) %>% summarise(sum(quantity))
sales %>% inner_join(product, by = 'prod_id') %>%
group_by(name) %>% summarise(sum(quantity))
vtable = data.frame(job_id = c(1,2,3,1,2),
member_id = c(10,20,10,20,30),
timestamp = c(1,1,2,2,2)
)
atable = data.frame(job_id = c(1,2,1),
member_id = c(10,20,20),
timestamp = c(1,1,2))
vtable
atable
sqldf("
select job_id, count(*) as num_view from vtable group by job_id
")
sqldf("
select job_id, count(distinct member_id) from vtable group by job_id
")
vtable = data.frame(job_id = c(1,2,3,1,2),
member_id = c(10,20,10,20,20),
timestamp = c(1,1,2,2,2)
)
sqldf("
select job_id, count(distinct member_id) from vtable group by job_id
")
sqldf("
select job_id, count(*) as num_view from vtable group by job_id
")
sqldf("
select job_id, count(distinct member_id) from atable group by job_id
")
sqldf("
select job_id, count(distinct member_id) as num_distinct_applier
from atable group by job_id
")
atable = data.frame(job_id = c(1,2,1,3),
member_id = c(10,20,20,20),
timestamp = c(1,1,2,2))
atable
sqldf("
select job_id, count(distinct member_id) as num_distinct_applier
from atable group by job_id
")
sqldf("
select distinct member_id from vtable group by job_id
")
atable
sqldf("
select *
from atable a left join vtable v
on a.job_id = v.job_id
")
sqldf("
select *
from atable a left join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
")
sqldf("
select v.job_id, count(distinct v.member_id)
from atable a left join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
group by v.job_id
")
sqldf("
select v.job_id, count(distinct v.member_id)
from atable a left join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
and a.timestamp >= v.timestamp
group by v.job_id
")
sqldf("
select *
from atable a left join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
and a.timestamp >= v.timestamp
group by v.job_id
")
sqldf("
select *
from atable a left join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
and a.timestamp >= v.timestamp
")
sqldf("
select *
from atable a join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
where a.timestamp >= v.timestamp
")
sqldf("
select a.job_id, count(distinct a.member_id) as num_distict_applier
from atable a join vtable v
on a.job_id = v.job_id and a.member_id = v.member_id
where a.timestamp >= v.timestamp
group by a.job_id
")
sqldf("
select job_id, count(distinct member_id) as num_distinct_applier
from atable group by job_id
")
s = "abcdef"
l = str_length(s)
library(stringr)
s = "abcdef"
l = str_length(s)
l
s1 = ""
s1
s
substr(s, 1 , 2)
substr(s, 1 , 1)
substr(s, l , l)
substr(s, l-1 , l-1)
for(i in 1:l){
s1 = paste0(s1,substr(s,l-i+1,l-i+1))
}
s1
s = "abcdef"
l = str_length(s)
s1 = ""
for(i in 1:l){
s1 = paste(s1,substr(s,l-i+1,l-i+1))
}
s1
?paste0
c = c(1,3,4,9,20,11,10,100,105)
sort = sort(c)
list = list()
start =1
count = 1
while(start != length(sort)){
for(i in start:(length(sort)-1)){
if(sort[i] != sort[i+1] -1){
end = i
break
}
}
if(start != end){
list[[count]] = sort[start:end]
count = count+1
start = end+1
}else{
start = end +1
}
}
count_num = function(input){
sorted_input = sort(input)
res = list()
start = 1
count = 1
while( start != length(input) ){
for ( i in c(start:(length(input)-1)) ){
if ( sorted_input[i] != (sorted_input[i+1] - 1)){
end = i
break
}
# corner case
if (i == (length(input) - 1)){
end = length(input)
res[[count]] = sorted_input[start:end]
return(res)
}
}
if ( start != end ){
res[[count]] = sorted_input[start:end]
count = count + 1
start = end + 1
} else {
start = end + 1
}
}
return(res)
}
count_num(c(1,3,4,9,20,11,10,100,105))
count_num(c(3,5,4,9,10,15,8,20))
find_duplicates = function(vec1, vec2){
res = c()
for (i in 1:length(vec1)){
if (vec1[i] %in% vec2){
res = c(res, vec1[i])
}
}
return(res)
}
find_duplicates(c(1,2,3),c(2,3,4))
find_duplicates(c(1,2,3), c(2,3,4))
find_duplicates(c(1,2,3),c(4,5,6))
vec = c(-1, 0, 3, 5, 6, -3, -4, -7, 6, 2, 1, -5, 1,2, 3)
start = 1
end = length(vec)
max = 0
for(i in start:length(vec)){
sum = vec[i]
if(i != length(vec)){
for(j in (start+1) : length(vec)){
sum = sum + vec[j]
if(sum > max){
start = i
end = j
max = sum
}
}
}
}
start
end
sum
largestsum
largestsum = function(lst){
max_sum = lst[1]
start = 1
end = length(lst)
for (i in 1:length(lst)){
# solve the case when the individual element is the largest
if (lst[i] > max_sum){
max_sum = lst[i]
start = i
end = i
}
if (i != length(lst)){
for (j in (i+1):length(lst)){
if(max_sum < sum(lst[i:j])){
max_sum = sum(lst[i:j])
start = i
end = j
}
}
}
}
return(list(start = start, end = end, max_sum = max_sum))
}
largestsum(c(-15,20,-20))
largestsum(c(-15,20,20))
largestsum(c(15,-20,-20))
largestsum = function(lst){
max_sum = lst[1]
start = 1
end = length(lst)
for (i in 1:length(lst)){
# solve the case when the individual element is the largest
if (lst[i] >= max_sum){
max_sum = lst[i]
start = i
end = i
}
if (i != length(lst)){
for (j in (i+1):length(lst)){
if(max_sum < sum(lst[i:j])){
max_sum = sum(lst[i:j])
start = i
end = j
}
}
}
}
return(list(start = start, end = end, max_sum = max_sum))
}
largestsum(c(15,-20,-20))
largestsum = function(lst){
max_sum = lst[1]
start = 1
end = 1
for (i in 1:length(lst)){
# solve the case when the individual element is the largest
if (lst[i] > max_sum){
max_sum = lst[i]
start = i
end = i
}
if (i != length(lst)){
for (j in (i+1):length(lst)){
if(max_sum < sum(lst[i:j])){
max_sum = sum(lst[i:j])
start = i
end = j
}
}
}
}
return(list(start = start, end = end, max_sum = max_sum))
}
largestsum(c(15,20,20))
largetsum = function(lst){
max_sum = lst[1]
start = 1
end = 1
for ( i in 1:length(lst) ){
# single number case
if ( lst[i] > max_sum ){
max_sum = lst[i]
start = i
end = i
}
# range case
if (i != length(lst)){
for ( j in (i+1):length(lst) ){
if ( sum(lst[i:j]) > max_sum ){
max_sum = sum(lst[i:j])
start = i
end = j
}
}
}
}
return(list(start = start,
end = ned,
max_sum = max_sum))
}
largetsum(c(1,2,3))
largetsum = function(lst){
max_sum = lst[1]
start = 1
end = 1
for ( i in 1:length(lst) ){
# single number case
if ( lst[i] > max_sum ){
max_sum = lst[i]
start = i
end = i
}
# range case
if (i != length(lst)){
for ( j in (i+1):length(lst) ){
if ( sum(lst[i:j]) > max_sum ){
max_sum = sum(lst[i:j])
start = i
end = j
}
}
}
}
return(list(start = start,
end = end,
max_sum = max_sum))
}
largetsum(c(1,2,3))
largetsum(c(1,2,-1))
largetsum(c(1,-2,-1))
largetsum(c(-1,-2,-1))
largetsum(c(0,-2,-1))
x
x1
x1 = -3;x2 = -1
while(abs(x1-x2)>0.0000001){
x_new = (x1+x2)/2
if(f(x1)<f(x2)){
x2 = x_new
}else{
x1 = x_new
}
}
f = function(x){x^2}
x1 = -3;x2 = -1
while(abs(x1-x2)>0.0000001){
x_new = (x1+x2)/2
if(f(x1)<f(x2)){
x2 = x_new
}else{
x1 = x_new
}
}
x1
x2
id = c(1,1,1,2,2,2,3,3,3)
company = c("F","G","F","F",'O',"G",'M','G','A')
year = c(2000,2006,2012,2000,2004,2007,2000,2005,2008)
select count(distinct id)
from t t1, t t2
on t1.id = t2.id
where t1.company = 'Microsoft' and t2.company = 'Google'
sqldf("
select count(distinct id)
from t t1, t t2
on t1.id = t2.id
where t1.company = 'M'
and t2.company = 'G'
and t1.year < t2.year
")
sqldf("
select count(distinct t1.id)
from t t1, t t2
on t1.id = t2.id
where t1.company = 'M'
and t2.company = 'G'
and t1.year < t2.year
")
|
#   | 1         | Google    | 2006       |
#   | 1         | Facebook  | 2012       |
#   | 2         | Microsoft | 2001       |
#   | 2         | Oracle    | 2004       |
#   | 2         | Google    | 2007       |
#   | ...       | ...       | ...        |
#   +-----------+-----------+------------+
#
# Question 1: How many members ever worked at Microsoft prior to working at Google?
#   (both member #1 and member #2 count)
# Question 2: How many members moved directly from Microsoft to Google? (Member 2 does not count since Microsoft -> Oracle -> Google)
# Question 3: Which is the most popular company given a specific year?
id = c(1,1,1,2,2,2,3,3,3)
company = c("F","G","F","F",'O',"G",'M','G','A')
year = c(2000,2006,2012,2000,2004,2007,2000,2005,2008)
t = data.frame(id,company,year)
sqldf("
select count(distinct t1.id)
from t t1, t t2
on t1.id = t2.id
where t1.company = 'M'
and t2.company = 'G'
and t1.year < t2.year
")
sqldf("
select *
from t t1, t t2
on t1.id = t2.id
where t1.company = 'M'
and t2.company = 'G'
and t1.year < t2.year
")
x = rnorm(100)
y = rnorm(100)
x
y
t.test(x)
t.test(x-y)
id = c(1,1,1,2,2,2,3,3,3)
company = c("F","G","F","F",'O',"G",'M','G','A')
year = c(2000,2006,2012,2000,2004,2007,2000,2005,2008)
t = data.frame(id,company,year)
sqldf("select count(*) as num
from t as a join t as b
on a.id = b.id
where a.year < b.year
and a.company = 'M'
and b.company = 'G'")
sqldf("
select company, lag(company) over( partition by id order by year) as previous_company
from t
")
sqldf("
select id, company, LAG(company) OVER (
PARTITION by id ORDER BY year) as previous_company
from t
")
sqldf("
select id, company, LAG(company) OVER (
PARTITION by id ORDER BY year) previous_company
from t;
")
install.packages()
install.packages("RPstgreSQL")
library(RPostgreSQL)
library(RPostgreSQL)
install.packages(RPostgreSQL)
install.packages('RPostgreSQL')
install.packages('RPostgreSQL')
library(RPostgreSQL)
sqldf("
select id, company, LAG(company) OVER (
PARTITION by id ORDER BY year) previous_company
from t;
")
sqldf("
select id, company, LAG(company) OVER (
PARTITION by id ORDER BY year) previous_company
from t;
")
DF <- data.frame(id=rep(1:2, each=5), tvar=rep(1:5,2), y=rnorm(1:10))
DF
BB <-
sqldf("select A.id, A.tvar, A.y, B.y as lag
from DF as A join DF as B
where A.rowid-1 = B.rowid and A.id=B.id
order by A.id, A.tvar")
remove.packages("RPostgreSQL")
BB <-
sqldf("select A.id, A.tvar, A.y, B.y as lag
from DF as A join DF as B
where A.rowid-1 = B.rowid and A.id=B.id
order by A.id, A.tvar")
